#!/usr/bin/env python3
"""
prepare_deploy.py ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Flask-–ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.
–ù–µ —Ç—Ä–æ–≥–∞–µ—Ç run.py, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å.
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

ROOT = Path(__file__).resolve().parent


def backup_if_exists(path: Path):
    """–°–æ–∑–¥–∞—ë—Ç .bak —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if path.exists():
        bak = path.with_suffix(path.suffix + ".bak")
        counter = 1
        while bak.exists():
            bak = path.with_suffix(path.suffix + f".bak{counter}")
            counter += 1
        shutil.copy2(path, bak)
        print(f"üì¶ Backup: {path} -> {bak}")


def write_file(path: Path, content: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –¥–µ–ª–∞—è —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    path.parent.mkdir(parents=True, exist_ok=True)
    backup_if_exists(path)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"‚úçÔ∏è  Written: {path}")


def generate_requirements():
    """–°–æ–∑–¥–∞—ë—Ç requirements.txt —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏."""
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è requirements.txt...")
    try:
        result = subprocess.run(
            [sys.executable, "-m", "pip", "freeze"],
            capture_output=True,
            text=True,
            check=True,
        )
        if not result.stdout.strip():
            print("‚ö†Ô∏è pip freeze –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª.")
        write_file(ROOT / "requirements.txt", result.stdout)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")


def ensure_git():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    if not (ROOT / ".git").exists():
        try:
            subprocess.run(["git", "init"], cwd=str(ROOT), check=True)
            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å git: {e}")
    else:
        print("üü¢ Git —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


def create_render_yaml():
    """–°–æ–∑–¥–∞—ë—Ç render.yaml, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    path = ROOT / "render.yaml"
    if path.exists():
        print("üü° render.yaml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    content = """services:
  - type: web
    name: secure-chat
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "python run.py"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: BASE_URL
        value: "https://your-app.onrender.com"
"""
    write_file(path, content)


def create_gitignore():
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç .gitignore –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏."""
    path = ROOT / ".gitignore"
    template = """# Python
__pycache__/
*.pyc
*.pyo
*.pyd

# Virtual environments
venv/
.env/
.venv/
env/

# Instance / local DB / uploads
instance/
*.db
*.sqlite3
uploads/
app/static/uploads/

# OS files
.DS_Store
Thumbs.db

# Secrets
.env
.env.local

# Tests / cache
.coverage
htmlcov/
build/
"""

    if path.exists():
        existing = path.read_text(encoding="utf-8")
        missing_lines = [
            line for line in template.splitlines() if line and line not in existing
        ]
        if missing_lines:
            with open(path, "a", encoding="utf-8") as f:
                f.write("\n# Added by prepare_deploy.py\n")
                f.write("\n".join(missing_lines))
            print("‚úÖ .gitignore –æ–±–Ω–æ–≤–ª—ë–Ω.")
        else:
            print("üü¢ .gitignore —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏.")
    else:
        write_file(path, template)


def main():
    print("\nüöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render...\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ run.py
    if (ROOT / "run.py").exists():
        print("‚úÖ run.py –Ω–∞–π–¥–µ–Ω.")
    else:
        print("‚ö†Ô∏è run.py –Ω–µ –Ω–∞–π–¥–µ–Ω! Render –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")

    # 2. –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã
    generate_requirements()
    create_render_yaml()
    create_gitignore()
    ensure_git()

    print("\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    print("\nüîπ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1Ô∏è‚É£ –ó–∞–π–¥–∏ –Ω–∞ https://render.com –∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π Web Service (Python).")
    print("  2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏ —ç—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (GitHub –∏–ª–∏ GitLab).")
    print("  3Ô∏è‚É£ –î–æ–±–∞–≤—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env):")
    print("      MAIL_SERVER, MAIL_PORT, MAIL_USERNAME, MAIL_PASSWORD, BASE_URL –∏ —Ç.–¥.")
    print("  4Ô∏è‚É£ –ü–æ—Å–ª–µ –±–∏–ª–¥–∞ Render —Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç python run.py üöÄ\n")


if __name__ == "__main__":
    main()
